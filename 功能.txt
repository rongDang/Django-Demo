关于Mdeditor富文本编辑器中图片大小的设置：
    选择上传图片后，复制图片地址，然后写到<img>标签中然后设置大小，markdown实时预览不会显示出图片，但是在网页渲染时会显示出图片


关于django-contrib-comments 的使用(皮毛)：
    在settings中apps注册后，执行python manage.py migrate进行数据迁移，登录admin就可以看到后台多了一个DJANGO_COMMENTS应用
    下面的Comments就是存储评论内容的表，里面有对应的评论内容和其他的信息。
    现在暂时只做到了一级评论，后续要进行更改才能做到多级评论，具体的使用可以看comment.html文件中的解释。
    我们可以理解它的功能就是和一个对象绑定，每个评论都需要和对象绑定，然后查看被绑定的对象也就可以看到下面对应的评论
    我的测试案例中将它和一篇博客进行绑定，然后在显示该博客时，就可以在下面显示对应的评论内容


Django-allauth第三方包：
    给我们一个默认的登录页面，在当前网页没有账号的话，可以提供给我们注册，注册后我们在admin后台可以看到新注册的用户
    注册通过邮箱注册后，会给注册邮箱一个验证信息，访问对应的验证链接才会通过验证，还可以通过第三方账号来登录，
    通过第三方登录的话，需要在apps中注册，例如通过GitHub登录则需要添加:allauth.socialaccount.providers.github

    //关于验证用户信息的另外一种方法，用户点击注册后，后台发送一条信息，内容和allauth发送的信息一样，中间添加一个链接要用户访问
    这里链接对应一个视图函数，不同的用户验证链接是不同的，给链接后面加一个加密参数来分辨不同用户，然后在视图函数中来分别验证
    通过最后的那个加密参数来分辨那个邮箱是同过验证的(如果自己来写这个邮箱验证功能的话，大概是这样操作?)

    问题：通过第三方账号登录？例如GitHub，我在自己的GitHub账号上创建一个OAuth Apps的应用，然后别人通过GitHub登录
    在GitHub上给我的这个app授权？然后再回到原来的页面进行账号绑定？

    理解:以GitHub为例子，我在GitHub上创建了一个OAuth Apps，GitHub给我提供了 App ID 和 API secret,这两个东西就可以证明我的身份
    就像使用QQ发送邮件的账号和授权码一样，你要使用GitHub的应用服务就需要它，这样用户在点击GitHub账号登录时需要给我的这个OAuth APPS
    进行授权，然后我就知道了授权用户的邮箱和昵称了，用户就算是登录了。

myaccount应用的功能:
    allauth并没有提供展示和修改用户资料的功能，也没有对用户资料进行扩展，这里我们在myaccount应用中添加这些功能
    一个是用户登录后跳转到个人信息页面(/accounts/profile/)，一个是允许登录用户编辑个人资料(/accounts/profile/update).

    1.创建应用配置
        在APPS中注册myaccount，同时将urls添加到项目根urls中去，链接路径和allauth的链接一样为accounts
        用户在登录或注册后自动跳转到/accounts/profile/  --> LOGIN_REDIRECT_URL = '/accounts/profile/'

    2.编写模型
        由于Django自带的User模型字段邮箱，所以我们需要对其扩展，最便捷的方式就是创建UserProfile的模型
        内容在 myaccount/models.py中所示

    3.编写urls和视图
        具体内容看 myaccount/urls.py 和 myaccount/views.py 文件

    4.添加表单
        用户更新资料需要用到表单，所以我们把表单单独放在forms.py文件中，里面有两个表单
        一个是更新用户资料时使用，一个是重写用户登录表单，
        重写用户登录表单是因为django-allauth在用户注册只会创建User对象，不会创建与之关联的UserProfile对象
        我们需要用户在注册时两个对象一起被创建并存到数据库中，所以需要通过重写表单
        要告诉Django的allauth使用我们自定义的登录表单，我们只需要在settings.py里加入一行。
        ACCOUNT_SIGNUP_FORM_CLASS = 'myaccount.forms.SignupForm'

    对了最后要运行和使用django-allauth和myaccount都要进行数据迁移，makegiations, migrate





Django的form表单结合bootstrap渲染前端代码
https://simpleisbetterthancomplex.com/article/2017/08/19/how-to-render-django-form-manually.html
form在模板中的渲染方式:
    form.as_p:渲染表单为一系列的p标签，每个p标签包含一个字段
    form.as_ul:渲染表单为一系列的li标签，每个li 标签包含一个字段，它不包含ul标签
    form.as_table:输出表单为一个HTML的table

    重点:通过循环渲染form字段
    {% for field in form %}，通过迭代form，获取其中的所有field。field可引用的包括: {{filed.label_tag}},
    {{ field }}, {{field.errors}}

    field.label_tag
        {{ field.label_tag }}输出为field的label元素：
        <label for="id_message">Message:</label>

    field
        {{ field }}输出为field的input
        <input type="text" name="message" id="id_message" />

    field.errors
        {{ field.errors }}field的errors元素（errors一般在form验证出错的时候显示）
        ['This field is required.']

    或者我们逐个渲染form表单，例如我的form表单中有 name,email,message三个字段，可以这样渲染出来：
    {{form.name.label_tag}}:字段名,{{form.name.errors}}:错误提示,{{form.name}}:字段输入框
    {{form.email.label_tag}}:字段名,{{form.email.errors}}:错误提示,{{form.email}}:字段输入框
    {{form.message.label_tag}}:字段名,{{form.message.errors}}:错误提示,{{form.message}}:字段输入框


    字段数据:不管表单提交的是什么数据，一旦通过is_valid的验证(is_valid返回True)，验证后的表单数据将位于form.cleaned_data字典中.
    我们可以form的验证方法，例如form中有字段:name,phone...那么我们可以在对应的form中写我们自定义的方法
    clean_name(self), clean_phone()


关于markdown的渲染方式：
    1.使用django-markdown-deux模块
        安装: pip install django-markdown-duex
        配置: 在settings中将 markdown-deux 添加到APPS中去
        使用:在html模板中加载 {% load markdown-deux-tags %}  {{ content| markdown }}

    2.使用python markdown模块渲染
        安装:pip install markdown
        使用: view.py里面使用markdown渲染，下面案例中，data.content是要渲染的数据， content是渲染后的结果
        content = markdown.markdown(data.content, extensions=[
            'markdown.extensions.extra',
            'markdown.extensions.codehilite',
            'markdown.extensions.toc',
        ])
        markdown模块会直接把markdown格式的文档渲染成html格式。不过django的模板里会对html做转义，所以还需要修改一下模板。
        所有使用content时需要添加safe过滤器 ---> {{ content | safe }}


    https://github.com/highlightjs/highlight.js/tree/master/src/styles   代码高亮css
    https://highlightjs.org/static/demo/        js渲染markdown
    https://highlightjs.org/download/           下载地址


Django 自定义装饰器进行登录访问限制
    首先简单介绍一下装饰器，装饰器相当于在一个函数外面又套了一层函数，将原函数集成到一段新的代码中，执行的时候直接运行外面这层函数，
    这样做的优点是可以动态扩展函数的功能。装饰器在 python 中的用法十分简单，外层函数放在原函数前，加@表示：
    @work
    def test(a,b):
        ....

    自定义装饰器，装饰器其实也就是一个函数，只不过它把一个函数作为参数传进来，返回了另外一个替换函数。
    def my_login_required(func):
    '''自定义 登录验证 装饰器'''
    def check_login_status(request):
        '''检查登录状态'''
        if request.session.has_key('user_id'):
            # 当前有用户登录，正常跳转
            return func(request)
        else:
            # 当前没有用户登录，跳转到登录页面
            return HttpResponseRedirect('/login')
    return check_login_status








